"=========================================================================
"                                 ~My vimrc~
"=========================================================================
"
" Author:       Ryan Huber
"
"-------------------------------------------------------------------------
"
set nocompatible
set t_Co=256

"-------------------------------------------------------------------------
" Package Setup
"-------------------------------------------------------------------------

let g:ale_completion_enabled = 1

"-------------------------------------------------------------------------
" Plugin Setup
"-------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

"Fuzzyfinder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

"Statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim'
Plug 'ryanoasis/vim-devicons'
"Plug 'vim-scripts/buftabline'

"Undo
Plug 'simnalamburt/vim-mundo'
"Plug 'sjl/gundo.vim'
"plug 'vim-scripts/gundo'

"Search
Plug 'haya14busa/is.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'osyo-manga/vim-anzu'

"Colorschemes
"Plug 'trevordmiller/nova-vim'
"Plug 'drewtempelmeyer/palenight.vim'
Plug 'flazz/vim-colorschemes'
"Plug 'haishanh/night-owl.vim'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
" Plug 'airblade/vim-gitgutter'
" Plug 'mhinz/vim-signify'
Plug 'jlanzarotta/bufexplorer'

"Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

"Syntax
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'Quramy/vim-js-pretty-template'
Plug 'digitaltoad/vim-pug'
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'jparise/vim-graphql'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'posva/vim-vue'
Plug 'elixir-lang/vim-elixir'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'toyamarinyon/vim-swift'
Plug 'keith/swift.vim'
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }

"Linting/Fixing
Plug 'w0rp/ale'
"Plug 'prettier/vim-prettier'

call plug#end()

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
"-------------------------------------------------------------------------
" let g:LanguageClient_serverCommands = {
"     \ 'reason': ['~/.vim/language-server/reason-language-server.exe'],
"     \ 'ocaml': ['ocaml-language-server', '--stdio'],
"     \ }
"let g:LanguageClient_serverCommands = {
"    \ 'ocaml': ['ocaml-language-server', '--stdio'],
"    \ }

" NERDTree config settings
" enable line numbers
"let NERDTreeShowLineNumbers=1
"map <C-n> :NERDTreeToggle<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" make sure relative line numbers are used
"autocmd FileType nerdtree setlocal relativenumber

" Use incsearch.vim for all search functions (with anzu for indication)
set hlsearch
map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
let g:anzu_status_format = "%p(%i/%l) %w"

" vim-ariline config settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:tmuxline_theme = 'nightly_fox'
let g:airline_theme='bubblegum'
" Javascript Syntax Formatting
let g:javascript_plugin_flow = 1
let g:used_javascript_libs = 'underscore,react,jasmine,chai,d3,ramda,vue'
set concealcursor=nc
set conceallevel=1
let g:jsx_ext_required = 0
" let g:javascript_conceal_null       = "ø"
" let g:javascript_conceal_this       = "@"
" let g:javascript_conceal_return     = "⇚"
" let g:javascript_conceal_undefined  = "¿"
" let g:javascript_conceal_NaN        = "ℕ"
" let g:javascript_conceal_prototype  = "¶"
" let g:javascript_conceal_static     = "•"
let g:vim_jsx_pretty_colorful_config = 1

" ultisnops
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

colorscheme jellybeans


" ALE
let g:ale_linters = {
\  'css': ['eslint', 'prettier'],
\  'elixir': ['elixir-ls', 'credo'],
\  'graphql': ['prettier'],
\  'html': ['prettier'],
\  'json': ['eslint', 'prettier'],
\  'scss': ['eslint'],
\  'javascript': ['prettier', 'eslint', 'tsserver' ],
\}
let g:ale_fixers = {
\  'javascript': ['prettier', 'eslint' ],
\  'json': ['eslint', 'prettier'],
\  'graphql': ['prettier'],
\  'css': ['eslint'],
\  'scss': ['eslint'],
\  'elixir': ['mix_format'],
\  'reason': ['refmt'],
\  'html': ['prettier'],
\  'swift': ['swiftformat']
\}

let g:ale_fix_on_save = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_completion_enabled = 1
set completeopt=menu,menuone,preview,noselect,noinsert

let g:ale_elixir_elixir_ls_release = '/Users/rphuber/.vim/language-server/elixir-ls/rel'

set diffopt+=vertical

set showtabline=2
set modelines=0
set vb "flash screen rather than sound bell
set laststatus=2 " Always display the statusline in all windows
set list " show trailing whiteshace and tabs
"set listchars=eol:↲,tab:▶▹,nbsp:␣,extends:…,trail:•
set listchars=tab:▸\ ,extends:>,precedes:<,nbsp:+,trail:•
set mouse=a
set wildmenu
set showtabline=2

set scrolloff=4
set autoindent
set cursorline
set backspace=indent,eol,start
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set number
set relativenumber
set lazyredraw
set regexpengine=1
set hlsearch
set incsearch
set ignorecase
set smartcase

"let g:netrw_bufsettings = 'noma nomod nu nowrap ro nobl'
"let g:netrw_winsize = 25
"let g:netrw_browse_split = 4
"let g:netrw_banner=0

set linebreak
set textwidth=80

set clipboard=unnamed

" Undo
set undofile                " Save undos after file closes
set undodir=~/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" Tabs
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

" Formatting
syntax on
set noswapfile
set splitright
set splitbelow

" Key Mappings
inoremap jj <ESC>

nnoremap 0 ^
nnoremap j gj
nnoremap k gk

nmap <silent> <Left> :tabp<CR>
nmap <silent> <Right> :tabn<CR>
nmap <silent> <Up> :bnext<CR>
nmap <silent> <Down> :bprevious<CR>

nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv
vnoremap <silent> <Down> :m '>+1<CR>gv=gv
vnoremap <silent> <Up> :m '<-2<CR>gv=gv

let mapleader = "\<Space>"
" Edit another file in the same directory as the current file
" " uses expression to extract path from current file's path
map <Leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
map <Leader>s :split <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <silent> <Leader>v :vnew <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <silent> <Leader>tnf :tabnew<C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nnoremap <silent> <Leader>tn :tabnew<CR>
nnoremap <silent> <Leader>tc :tabclose<CR>
nnoremap <silent> <Leader>ts :tab split<CR>
nnoremap <silent> <Leader>to :tabonly<CR>
nnoremap <silent> <Leader>ut :MundoToggle<CR>
nnoremap <silent> <Leader>gd :ALEGoToDefinitionInTab<CR>
nnoremap <silent> <Leader>ho :ALEHover<CR>
nnoremap <silent> <Leader>ff :Files<CR>
nnoremap <silent> <Leader>gf :GFiles<CR>
nnoremap <silent> <leader>j :ALENext<cr>
nnoremap <silent> <leader>k :ALEPrevious<cr>
nmap <silent> <leader>fix <Plug>(ale_fix)

" Split edit your vimrc. Type space, v, r in sequence to trigger
nmap <Leader>vr :sp $MYVIMRC<cr>
" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <Leader>so :source $MYVIMRC<cr>
" Explore using leader
nmap <Leader>ex :Explore<cr>
" Show keyword for formatting of text under cursor
nmap <Leader>sI :call <SID>SynStack()<CR>

let g:javascript_plugin_flow = 1

autocmd BufRead,BufNewFile .{jscs,jshint,eslint,babel}rc set filetype=json
autocmd InsertEnter * setlocal conceallevel=2 concealcursor=nc
autocmd InsertLeave * setlocal conceallevel=2 concealcursor=inc
autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql ALEFix
autocmd BufRead,BufNewFile *.json setlocal conceallevel=2 concealcursor=nc

augroup VimCSS3Syntax
  autocmd!
  autocmd FileType css setlocal iskeyword+=-
augroup END

" set background=dark
highlight clear SignColumn
highlight CursorLineNr cterm=NONE ctermbg=NONE ctermfg=green
highlight cssIdentifier ctermfg=5
highlight cssClassName ctermfg=214

set concealcursor=nc
set conceallevel=2

hi comment cterm=italic
hi Special cterm=italic
hi htmlArg cterm=italic ctermfg=214
hi jsxAttrib cterm=italic ctermfg=214

" Functions
" Show keyword for formatting of text under cursor
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Gitgutter
" let g:gitgutter_override_sign_column_highlight=0
" let g:gitgutter_sign_added = '+'
" let g:gitgutter_sign_modified = '•'
" let g:gitgutter_sign_removed = '-'
" let g:gitgutter_sign_removed_first_line = '|'
" let g:gitgutter_sign_modified_removed = '|'
" highlight GitGutterAdd    ctermfg=2 ctermbg=NONE
" highlight GitGutterChange ctermfg=3 ctermbg=NONE
" highlight GitGutterDelete ctermfg=1 ctermbg=NONE

highlight ALEErrorSign ctermbg=NONE ctermfg=124
highlight ALEWarningSign ctermbg=NONE ctermfg=11
