"==============================================================================
"                                 ~My vimrc~
"==============================================================================
"
" Author:       Ryan Huber
"
"------------------------------------------------------------------------------
"
set nocompatible
set t_Co=256

"------------------------------------------------------------------------------
" Package Setup
"------------------------------------------------------------------------------

let g:minBufExplForceSyntaxEnable = 1
set rtp+=~/.vim/bundle/Vundle.vim

"-------------------------------------------------------------------------------
" Vundle Setup
"-------------------------------------------------------------------------------

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'edkolev/tmuxline.vim'
Plugin 'vim-scripts/Gundo'
"Plugin 'vim-scripts/buftabline'
"Plugin 'scrooloose/nerdtree'
"Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'flazz/vim-colorschemes'
Plugin 'auto-pairs'
Plugin 'surround.vim'
Plugin 'commentary.vim'
Plugin 'repeat.vim'
Plugin 'fugitive.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'jlanzarotta/bufexplorer'
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'Yggdroot/indentLine'

"Plugin 'moll/vim-node'
Plugin 'othree/html5.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'Quramy/vim-js-pretty-template'
Plugin 'digitaltoad/vim-pug'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'jparise/vim-graphql'
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'posva/vim-vue'

Plugin 'elixir-lang/vim-elixir'
"Plugin 'reasonml-editor/vim-reason'
Plugin 'reasonml-editor/vim-reason-plus'

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

Plugin 'w0rp/ale'
"Plugin 'prettier/vim-prettier'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required


filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
"------------------------------------------------------------------------------
let g:LanguageClient_serverCommands = {
    \ 'reason': ['ocaml-language-server', '--stdio'],
    \ 'ocaml': ['ocaml-language-server', '--stdio'],
    \ }

" NERDTree config settings
"-------------------------------------------------------------------------------
" enable line numbers
"let NERDTreeShowLineNumbers=1
"map <C-n> :NERDTreeToggle<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" make sure relative line numbers are used
"autocmd FileType nerdtree setlocal relativenumber

" vim-ariline config settings
" ------------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" Javascript Syntax Formatting
let g:javascript_plugin_flow = 1
let g:used_javascript_libs = 'underscore,react,jasmine,chai,d3,ramda,vue'
set concealcursor=nc
set conceallevel=1
let g:jsx_ext_required = 0
" let g:javascript_conceal_null       = "ø"
" let g:javascript_conceal_this       = "@"
" let g:javascript_conceal_return     = "⇚"
" let g:javascript_conceal_undefined  = "¿"
" let g:javascript_conceal_NaN        = "ℕ"
" let g:javascript_conceal_prototype  = "¶"
" let g:javascript_conceal_static     = "•"
let g:vim_jsx_pretty_colorful_config = 1
"------------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline_theme='bubblegum'

" ultisnops
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" Gitgutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '•'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '|'
let g:gitgutter_sign_modified_removed = '|'
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

" ALE
let g:ale_linters = {
\  'javascript': ['eslint'],
\  'json': ['eslint'],
\  'graphql': ['eslint'],
\  'css': ['eslint'],
\  'scss': ['eslint'],
\}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'json': ['eslint'],
\  'graphql': ['eslint'],
\  'css': ['eslint'],
\  'scss': ['eslint'],
\  'elixir': ['mix_format'],
\  'reason': ['refmt'],
\}
let g:ale_fix_on_save = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_completion_enabled = 1

set diffopt+=vertical

set showtabline=2
set modelines=0
set vb "flash screen rather than sound bell
set laststatus=2 " Always display the statusline in all windows
set list " show trailing whiteshace and tabs
set listchars=tab:▸\ ,trail:.,extends:>,precedes:<,nbsp:+
set mouse=a
set wildmenu
set showtabline=2

set scrolloff=4
set autoindent
set cursorline
set backspace=indent,eol,start
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set relativenumber
set number
set hlsearch
set incsearch
set ignorecase
set smartcase
let g:netrw_bufsettings = 'noma nomod nu nowrap ro nobl'
"let g:netrw_winsize = 25
"let g:netrw_browse_split = 4
let g:netrw_banner=0

set linebreak
set textwidth=80
set colorcolumn=+1,+2

set undofile                " Save undos after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

set guifont=Inconsolata\ for\ Powerline:h14
set clipboard=unnamed

" Undo
" ------------------------------------------------------------------------------
set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000
set undoreload=10000

"------------------------------------------------------------------------------
" Tabs
"-----------------------------------------------------------------------------
set tabstop=2
set shiftwidth=2
set expandtab
set softtabstop=2

"------------------------------------------------------------------------------
" Formatting
"------------------------------------------------------------------------------
syntax on
set noswapfile
set splitright
set splitbelow

"------------------------------------------------------------------------------
" Key Mappings
"------------------------------------------------------------------------------

inoremap jj <ESC>

nnoremap 0 ^
nnoremap j gj
nnoremap k gk

nmap <silent> <Left> :tabp<CR>
nmap <silent> <Right> :tabn<CR>
nmap <silent> <Up> :bnext<CR>
nmap <silent> <Down> :bprevious<CR>

nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv
vnoremap <silent> <Down> :m '>+1<CR>gv=gv
vnoremap <silent> <Up> :m '<-2<CR>gv=gv

let mapleader = "\<Space>"
" Edit another file in the same directory as the current file
" " uses expression to extract path from current file's path
map <Leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>
map <Leader>s :split <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
map <Leader>v :vnew <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
map <Leader>tn :tabnew<CR>
map <Leader>tc :tabclose<CR>
map <Leader>ts :tab split<CR>
map <Leader>to :tabonly<CR>
map <Leader>gt :GundoToggle<CR>
map <Leader>gd :ALEGoToDefinition<CR>
map <Leader>ho :ALEHover<CR>

" Split edit your vimrc. Type space, v, r in sequence to trigger
nmap <Leader>vr :sp $MYVIMRC<cr>
" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <Leader>so :source $MYVIMRC<cr>
" Explore using leader
nmap <Leader>ex :Explore<cr>
" Show keyword for formatting of text under cursor
nmap <Leader>sI :call <SID>SynStack()<CR>


hi Special cterm=italic
hi Conceal ctermfg=red

let g:javascript_plugin_flow = 1
autocmd InsertEnter * setlocal conceallevel=2 concealcursor=nc
autocmd InsertLeave * setlocal conceallevel=2 concealcursor=inc
autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql ALEFix
autocmd BufRead,BufNewFile *.json setlocal conceallevel=2 concealcursor=nc
colorscheme jellybeans

augroup VimCSS3Syntax
  autocmd!
  autocmd FileType css setlocal iskeyword+=-
augroup END

augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END


" set background=dark

highlight CursorLineNr cterm=NONE ctermbg=NONE ctermfg=green
highlight cssIdentifier ctermfg=5
highlight cssClassName ctermfg=214

set concealcursor=nc
set conceallevel=2

hi comment cterm=italic
hi Special cterm=italic
hi htmlArg cterm=italic ctermfg=214
hi jsxAttrib cterm=italic ctermfg=214

" Functions
"===============================================================================

" Show keyword for formatting of text under cursor
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
